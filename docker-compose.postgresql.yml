# Docker Compose - PostgreSQL + Redis 拡張版
# PersonalCookingRecipe Phase 1: 緊急安定化対応
version: '3.8'

services:
  # PostgreSQL データベース (SQLite置き換え)
  postgres:
    image: postgres:15-alpine
    container_name: recipe-postgres
    environment:
      - POSTGRES_DB=recipe_db
      - POSTGRES_USER=recipe_user
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-recipe_secure_pass}
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --locale=C
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./postgres/init:/docker-entrypoint-initdb.d
      - ./logs/postgres:/var/log/postgresql
    networks:
      - recipe-network
    restart: unless-stopped
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U recipe_user -d recipe_db"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 30s

  # Redis キャッシュ (JWT + API キャッシング)
  redis:
    image: redis:7-alpine
    container_name: recipe-redis
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD:-redis_secure_pass}
    volumes:
      - redis-data:/data
      - ./redis/redis.conf:/etc/redis/redis.conf:ro
      - ./logs/redis:/var/log/redis
    networks:
      - recipe-network
    restart: unless-stopped
    ports:
      - "6379:6379"
    command: redis-server /etc/redis/redis.conf --requirepass ${REDIS_PASSWORD:-redis_secure_pass}
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3

  # Nginx リバースプロキシ (既存設定継承)
  nginx:
    image: nginx:alpine
    container_name: recipe-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/sites-enabled:/etc/nginx/sites-enabled:ro
      - ./ssl:/etc/nginx/ssl:ro
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - frontend
      - backend
      - api
    networks:
      - recipe-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # フロントエンド（Next.js）- 既存設定継承
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: runner
    container_name: recipe-frontend
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=http://backend:5000
      - NEXT_PUBLIC_FASTAPI_URL=http://api:8000
      - REDIS_URL=redis://redis:6379
      - REDIS_PASSWORD=${REDIS_PASSWORD:-redis_secure_pass}
    volumes:
      - ./logs/frontend:/app/logs
    networks:
      - recipe-network
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      backend:
        condition: service_started
      api:
        condition: service_started

  # バックエンド（Node.js Express）- PostgreSQL対応
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: runner
    container_name: recipe-backend
    environment:
      - NODE_ENV=production
      - PORT=5000
      - JWT_SECRET=${JWT_SECRET}
      
      # PostgreSQL 設定
      - DB_TYPE=postgresql
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=recipe_db
      - DB_USER=recipe_user
      - DB_PASSWORD=${POSTGRES_PASSWORD:-recipe_secure_pass}
      - DB_CONNECTION_POOL_MIN=5
      - DB_CONNECTION_POOL_MAX=50
      - DB_CONNECTION_TIMEOUT=30000
      
      # Redis キャッシング設定
      - REDIS_URL=redis://redis:6379
      - REDIS_PASSWORD=${REDIS_PASSWORD:-redis_secure_pass}
      - JWT_CACHE_ENABLED=true
      - JWT_CACHE_TTL=3600
      
      # パフォーマンス設定
      - UPLOAD_PATH=/app/uploads
      - LOG_LEVEL=info
    volumes:
      - recipe-uploads:/app/uploads
      - ./logs/backend:/app/logs
    networks:
      - recipe-network
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:5000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # API（FastAPI Python）- PostgreSQL + Redis対応
  api:
    build:
      context: ./api
      dockerfile: Dockerfile.production
      target: runner
    container_name: recipe-api
    environment:
      - PYTHONPATH=/app
      - LOG_LEVEL=info
      
      # サービス連携設定
      - BACKEND_URL=http://backend:5000
      - FRONTEND_URL=http://frontend:3000
      
      # PostgreSQL 設定
      - DB_TYPE=postgresql
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=recipe_db
      - DB_USER=recipe_user
      - DB_PASSWORD=${POSTGRES_PASSWORD:-recipe_secure_pass}
      
      # Redis 設定  
      - REDIS_URL=redis://redis:6379
      - REDIS_PASSWORD=${REDIS_PASSWORD:-redis_secure_pass}
      - CACHE_ENABLED=true
      - CACHE_TTL=1800
      
    volumes:
      - ./logs/api:/app/logs
      - recipe-data:/app/data:ro
    networks:
      - recipe-network
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      backend:
        condition: service_started
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:8000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ログ管理（Fluentd）- 既存設定継承
  fluentd:
    image: fluent/fluentd:v1.16-1
    container_name: recipe-fluentd
    volumes:
      - ./fluentd/fluent.conf:/fluentd/etc/fluent.conf:ro
      - ./logs:/var/log/input
      - fluentd-logs:/var/log/fluentd
    networks:
      - recipe-network
    restart: unless-stopped

  # システム監視（Prometheus）- 拡張版
  prometheus:
    image: prom/prometheus:latest
    container_name: recipe-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./monitoring/postgres-exporter.yml:/etc/prometheus/postgres-exporter.yml:ro
      - ./monitoring/redis-exporter.yml:/etc/prometheus/redis-exporter.yml:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=30d'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - recipe-network
    restart: unless-stopped
    profiles:
      - monitoring

  # PostgreSQL監視
  postgres-exporter:
    image: prometheuscommunity/postgres-exporter:latest
    container_name: recipe-postgres-exporter
    environment:
      - DATA_SOURCE_NAME=postgresql://recipe_user:${POSTGRES_PASSWORD:-recipe_secure_pass}@postgres:5432/recipe_db?sslmode=disable
    networks:
      - recipe-network
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
    profiles:
      - monitoring

  # Redis監視
  redis-exporter:
    image: oliver006/redis_exporter:latest
    container_name: recipe-redis-exporter
    environment:
      - REDIS_ADDR=redis://redis:6379
      - REDIS_PASSWORD=${REDIS_PASSWORD:-redis_secure_pass}
    networks:
      - recipe-network
    restart: unless-stopped
    depends_on:
      redis:
        condition: service_healthy
    profiles:
      - monitoring

  # グラフィック監視（Grafana）- 拡張ダッシュボード
  grafana:
    image: grafana/grafana:latest
    container_name: recipe-grafana
    ports:
      - "3001:3000"
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana:/etc/grafana/provisioning
      - ./monitoring/dashboards:/var/lib/grafana/dashboards
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_INSTALL_PLUGINS=redis-datasource,postgres-datasource
    networks:
      - recipe-network
    restart: unless-stopped
    profiles:
      - monitoring
    depends_on:
      - prometheus
      - postgres-exporter
      - redis-exporter

volumes:
  # PostgreSQL データ永続化
  postgres-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${PWD}/data/postgres

  # Redis データ永続化  
  redis-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${PWD}/data/redis

  # 既存ボリューム継承
  recipe-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${PWD}/data
  
  recipe-uploads:
    driver: local
    driver_opts:
      type: none  
      o: bind
      device: ${PWD}/uploads
      
  fluentd-logs:
  prometheus-data:
  grafana-data:

networks:
  recipe-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.25.0.0/16