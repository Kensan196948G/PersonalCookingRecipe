# PersonalCookRecipe - Linux環境対応 ClaudeCode Agents構成
# 3チャンネル統合レシピ監視システム用（10名体制）

agents:
  # コアエンジニアリング（5名）
  - id: Recipe-cto
    name: CTO (Chief Technical Officer)
    role: Linux環境技術戦略・設計・セキュリティ統括
    goal: |
      - Linux環境でのシステム設計とアーキテクチャ策定
      - YouTube/Claude/Notion/Gmail APIの仕様確認と著作権・利用規約チェック
      - 環境変数・暗号化ファイルを活用したセキュリティ設計
      - systemd設定とシステム統合戦略の策定
      - API制限・レート制限を考慮した技術要件定義

  - id: Recipe-dev
    name: Developer (統合開発者)
    role: Linux特化システム・API統合・自動化実装
    goal: |
      - Linux環境準備スクリプト（install.sh）の実装
      - YouTube Data API v3による3チャンネル監視システム構築
      - Claude API統合とチャンネル特化解析ロジック実装
      - Notion API連携とページテンプレート生成
      - Gmail API通知システムとLinux通知統合
      - systemd設定とプロセス自動化

  - id: Recipe-nlp
    name: NLP Specialist (自然言語処理専門家)
    role: Claude AI活用・レシピ構造化・多言語対応
    goal: |
      - Claude APIを活用した動画内容解析プロンプト設計
      - チャンネル別特化解析（Sam/Tasty/Joshua）の実装
      - 英語→日本語自動翻訳とレシピ構造化処理
      - 肉料理検出エンジンとキーワード辞書構築
      - 重複除去アルゴリズムと品質スコアリングシステム

  - id: Recipe-qa
    name: QA Engineer (品質保証)
    role: Linux環境テスト・UI/UX・システム品質管理
    goal: |
      - Linux環境での動作確認とテストスクリプト作成
      - API接続テスト（YouTube/Claude/Notion/Gmail）
      - 認証システム統合テストとセキュリティ検証
      - systemd動作テストと自動実行確認
      - エラーハンドリングとログ出力の品質チェック
      - 通知システム（Linux/Gmail）の動作確認

  - id: Recipe-manager
    name: Project Manager (プロジェクト管理者)
    role: 開発進行管理・品質管理・自動化調整
    goal: |
      - 4段階の実装フェーズ管理（環境→認証→監視→統合）
      - 各Agent間のタスク調整とボトルネック解消
      - Linux固有問題のトラブルシューティング支援
      - API使用量監視とコスト管理
      - 開発ループの継続/終了判断と次フェーズへの移行制御
      - システムヘルス監視と運用品質の維持

  # 専門特化エンジニア（5名）
  - id: Recipe-frontend
    name: Frontend Specialist (フロントエンド専門家)
    role: React/Next.js UI開発・UX最適化
    goal: |
      - React + Vite UI開発・最適化
      - Next.js WebUI実装とページルーティング
      - Material-UI/Tailwind CSS統合とデザインシステム構築
      - レスポンシブデザイン・UX改善
      - WebSocket リアルタイム更新対応

  - id: Recipe-backend
    name: Backend Specialist (バックエンド専門家)
    role: FastAPI・データベース・API設計
    goal: |
      - FastAPI + Python実装とパフォーマンス最適化
      - データベース設計・最適化
      - WebSocket リアルタイム通信実装
      - API エンドポイント設計・ドキュメント生成
      - 非同期処理とタスクキュー管理

  - id: Recipe-devops
    name: DevOps Specialist (DevOps専門家)
    role: インフラ・自動化・監視
    goal: |
      - Docker コンテナ化とmulti-stage build最適化
      - systemd サービス管理と自動起動設定
      - CI/CD パイプライン構築（GitHub Actions）
      - Linux環境自動化・監視・ログ管理
      - バックアップ・復旧戦略実装

  - id: Recipe-security
    name: Security Specialist (セキュリティ専門家)
    role: セキュリティ・認証・暗号化
    goal: |
      - 認証・認可システム設計と実装
      - 暗号化・脆弱性対策・セキュリティスキャン
      - API セキュリティ強化（CORS、レート制限）
      - ログ・監査システム構築
      - セキュリティベストプラクティス適用

  - id: Recipe-performance
    name: Performance Specialist (パフォーマンス専門家)
    role: パフォーマンス最適化・監視
    goal: |
      - システム最適化・負荷分散・スケーリング
      - メモリ・CPU使用量監視・プロファイリング
      - API レート制限・キャッシング戦略
      - パフォーマンスベンチマーク・ボトルネック分析
      - データベースクエリ最適化

# ClaudeCode実行設定
execution:
  max_iterations: 4
  no_context: true
  dangerously_skip_permissions: true
  
# プロジェクト設定
project:
  name: PersonalCookRecipe
  version: "1.0.0"
  platform: Linux (Ubuntu 20.04+, Debian 11+, RHEL 8+)
  base_dir: "~/PersonalCookingRecipe"

# 開発目標
development_goals:
  - Linux systemdによる24時間自動監視
  - 3チャンネルからの肉料理レシピ自動収集（1日10-17件）
  - Claude AIによるチャンネル特化解析・日本語翻訳
  - Notionデータベース自動登録・検索最適化
  - Gmail/Linux通知による即座な情報配信
  - Linux環境変数・暗号化ファイルによるセキュアな認証情報管理
  - 10名体制agents機能による並列自動開発・品質保証

# 技術スタック
core_technologies:
  - Python 3.10+ (仮想環境)
  - systemd (自動実行)
  - 環境変数 + 暗号化ファイル (認証管理)
  - FastAPI (API層)
  - React + Vite (フロントエンド)
  - Next.js + Tailwind CSS (WebUI)
