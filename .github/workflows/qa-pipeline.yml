name: Quality Assurance Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.12'

jobs:
  # Áí∞Â¢É„Çª„ÉÉ„Éà„Ç¢„ÉÉ„Éó„Å®„Éá„Éº„Çø„Éô„Éº„ÇπÂàùÊúüÂåñ
  setup:
    runs-on: ubuntu-latest
    outputs:
      cache-key: ${{ steps.cache-keys.outputs.node-key }}
      python-cache-key: ${{ steps.cache-keys.outputs.python-key }}
    steps:
      - uses: actions/checkout@v4
      
      - id: cache-keys
        run: |
          echo "node-key=node-${{ hashFiles('**/package-lock.json', '**/yarn.lock') }}" >> $GITHUB_OUTPUT
          echo "python-key=python-${{ hashFiles('**/requirements.txt', '**/Pipfile.lock') }}" >> $GITHUB_OUTPUT
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: |
            backend/package-lock.json
            src/frontend/package-lock.json
      
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          cache-dependency-path: api/requirements.txt
      
      - name: Install Dependencies
        run: |
          # Backend dependencies
          cd backend && npm ci
          # Frontend dependencies  
          cd ../src/frontend && npm ci
          # API dependencies
          cd ../../api && pip install -r requirements.txt
      
      - name: Database Setup
        run: |
          # „ÉÜ„Çπ„ÉàÁî®„Éá„Éº„Çø„Éô„Éº„ÇπÊ®©ÈôêË®≠ÂÆö
          sudo mkdir -p /tmp/test-db
          sudo chmod 777 /tmp/test-db
          # SQLiteË®≠ÂÆö
          sudo apt-get update
          sudo apt-get install -y sqlite3

  # Âçò‰Ωì„ÉÜ„Çπ„ÉàÔºà‰∏¶ÂàóÂÆüË°åÔºâ
  unit-tests:
    needs: setup
    runs-on: ubuntu-latest
    strategy:
      matrix:
        component: [backend, frontend, api]
    steps:
      - uses: actions/checkout@v4
      
      - name: Restore Node Cache
        if: matrix.component != 'api'
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ needs.setup.outputs.cache-key }}
      
      - name: Restore Python Cache
        if: matrix.component == 'api'
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ needs.setup.outputs.python-cache-key }}
      
      - name: Setup Runtime
        run: |
          if [ "${{ matrix.component }}" = "api" ]; then
            python -m pip install --upgrade pip
            pip install -r api/requirements.txt
          else
            cd ${{ matrix.component }} && npm ci
          fi
      
      - name: Run Unit Tests
        env:
          NODE_ENV: test
          DATABASE_URL: file:/tmp/test-db/test.db
          JWT_SECRET: test-secret-key-for-ci
        run: |
          case "${{ matrix.component }}" in
            "backend")
              cd backend
              chmod 777 /tmp/test-db
              npm run test:unit -- --maxWorkers=2 --coverage
              ;;
            "frontend") 
              cd src/frontend
              npm run test -- --coverage
              ;;
            "api")
              cd api
              python -m pytest tests/ -v --cov=. --cov-report=xml --cov-report=term-missing
              ;;
          esac
      
      - name: Upload Coverage
        uses: codecov/codecov-action@v3
        with:
          file: |
            backend/coverage/lcov.info
            src/frontend/coverage/lcov.info
            api/coverage.xml
          flags: ${{ matrix.component }}

  # Áµ±Âêà„ÉÜ„Çπ„Éà
  integration-tests:
    needs: [setup, unit-tests]
    runs-on: ubuntu-latest
    services:
      database:
        image: sqlite:latest
        options: >-
          --health-cmd "sqlite3 --version"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Full Environment
        run: |
          # Áµ±Âêà„ÉÜ„Çπ„ÉàÁî®„Éá„Éº„Çø„Éô„Éº„Çπ
          mkdir -p /tmp/integration-db
          chmod 777 /tmp/integration-db
          
          # Backend setup
          cd backend && npm ci
          
          # Frontend setup  
          cd ../src/frontend && npm ci
          
          # API setup
          cd ../../api && pip install -r requirements.txt
      
      - name: Database Migration
        env:
          DATABASE_URL: file:/tmp/integration-db/test.db
        run: |
          cd backend
          npm run db:migrate
      
      - name: Start Services
        env:
          NODE_ENV: test
          PORT: 3001
          DATABASE_URL: file:/tmp/integration-db/test.db
          JWT_SECRET: test-integration-secret
        run: |
          # Start backend in background
          cd backend && npm start &
          
          # Start API service
          cd api && python -m uvicorn main:app --host 0.0.0.0 --port 8001 &
          
          # Wait for services
          sleep 10
      
      - name: Run Integration Tests
        env:
          BACKEND_URL: http://localhost:3001
          API_URL: http://localhost:8001
          DATABASE_URL: file:/tmp/integration-db/test.db
        run: |
          # Backend integration tests
          cd backend && npm run test:integration
          
          # API integration tests
          cd ../api && python -m pytest tests/integration/ -v
          
          # Cross-service tests
          cd ../tests && python -m pytest test_api_connections.py -v
      
      - name: Performance Tests
        env:
          BACKEND_URL: http://localhost:3001
        run: |
          # Ë™çË®º„Éë„Éï„Ç©„Éº„Éû„É≥„Çπ„ÉÜ„Çπ„Éà
          cd backend
          npm run test:performance
      
      - name: Cleanup
        if: always()
        run: |
          pkill -f "node.*server.js" || true
          pkill -f "uvicorn" || true

  # E2E„ÉÜ„Çπ„Éà
  e2e-tests:
    needs: [setup, unit-tests]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Playwright
        run: |
          cd e2e
          npm ci
          npx playwright install --with-deps
      
      - name: Setup Test Environment
        env:
          NODE_ENV: test
          DATABASE_URL: file:/tmp/e2e-db/test.db
        run: |
          # E2EÁî®„Éá„Éº„Çø„Éô„Éº„Çπ
          mkdir -p /tmp/e2e-db
          chmod 777 /tmp/e2e-db
          
          # Full stack setup
          cd backend && npm ci && npm run db:migrate
          cd ../src/frontend && npm ci && npm run build
          cd ../../api && pip install -r requirements.txt
      
      - name: Start Full Stack
        env:
          NODE_ENV: test  
          DATABASE_URL: file:/tmp/e2e-db/test.db
        run: |
          # Start all services for E2E
          cd backend && npm start &
          cd src/frontend && npm run preview &
          cd api && python -m uvicorn main:app --host 0.0.0.0 --port 8001 &
          sleep 15
      
      - name: Run E2E Tests
        run: |
          cd e2e
          npx playwright test
      
      - name: Upload E2E Results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: playwright-report
          path: e2e/playwright-report/

  # „Çª„Ç≠„É•„É™„ÉÜ„Ç£Áõ£Êüª
  security-audit:
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Node.js Security Audit
        run: |
          cd backend && npm audit --audit-level=moderate
          cd ../src/frontend && npm audit --audit-level=moderate
      
      - name: Python Security Scan
        run: |
          cd api
          pip install safety bandit
          safety check
          bandit -r . -f json -o bandit-report.json
      
      - name: SAST Scan
        uses: github/codeql-action/init@v2
        with:
          languages: javascript, python
      
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2

  # ÂìÅË≥™„Ç≤„Éº„Éà
  quality-gate:
    needs: [unit-tests, integration-tests, e2e-tests, security-audit]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Download Coverage Reports
        uses: actions/download-artifact@v3
        with:
          name: coverage-reports
      
      - name: Quality Gate Check
        env:
          MIN_COVERAGE: 80
          MAX_FAILED_TESTS: 0
          MAX_CRITICAL_VULNERABILITIES: 0
        run: |
          # „Ç´„Éê„É¨„ÉÉ„Ç∏„ÉÅ„Çß„ÉÉ„ÇØ
          coverage=$(cat coverage-summary.json | jq '.total.lines.pct')
          if (( $(echo "$coverage < $MIN_COVERAGE" | bc -l) )); then
            echo "‚ùå Coverage $coverage% < $MIN_COVERAGE%"
            exit 1
          fi
          
          # „ÉÜ„Çπ„ÉàÁµêÊûú„ÉÅ„Çß„ÉÉ„ÇØ
          failed_tests=$(cat test-results.json | jq '.numFailedTests')
          if [ "$failed_tests" -gt "$MAX_FAILED_TESTS" ]; then
            echo "‚ùå Failed tests: $failed_tests"
            exit 1
          fi
          
          echo "‚úÖ Quality Gate Passed"
          echo "üìä Coverage: $coverage%"
          echo "üß™ Failed Tests: $failed_tests"

  # „Éá„Éó„É≠„Ç§ÔºàÂìÅË≥™„Ç≤„Éº„ÉàÈÄöÈÅéÂæåÔºâ
  deploy:
    needs: quality-gate
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && needs.quality-gate.result == 'success'
    steps:
      - uses: actions/checkout@v4
      
      - name: Deploy to Production
        env:
          DEPLOY_TOKEN: ${{ secrets.DEPLOY_TOKEN }}
        run: |
          echo "üöÄ Deploying to production..."
          # ÂÆüÈöõ„ÅÆ„Éá„Éó„É≠„Ç§Âá¶ÁêÜ
          
      - name: Deployment Verification
        run: |
          # „Éò„É´„Çπ„ÉÅ„Çß„ÉÉ„ÇØ
          curl -f https://your-app.com/health || exit 1
          echo "‚úÖ Deployment verified"

  # ÂìÅË≥™„É¨„Éù„Éº„ÉàÁîüÊàê
  quality-report:
    needs: [quality-gate]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Generate Quality Report
        run: |
          echo "# Quality Assurance Report" > qa-report.md
          echo "## Summary" >> qa-report.md
          echo "- Pipeline Status: ${{ needs.quality-gate.result }}" >> qa-report.md
          echo "- Coverage: $(cat coverage-summary.json | jq -r '.total.lines.pct')%" >> qa-report.md
          echo "- Test Results: $(cat test-results.json | jq -r '.numPassedTests') passed, $(cat test-results.json | jq -r '.numFailedTests') failed" >> qa-report.md
          
      - name: Post to Slack
        if: always()
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
        run: |
          status="${{ needs.quality-gate.result }}"
          if [ "$status" = "success" ]; then
            emoji="‚úÖ"
            color="good"
          else
            emoji="‚ùå"
            color="danger"
          fi
          
          curl -X POST -H 'Content-type: application/json' \
            --data "{\"text\":\"${emoji} QA Pipeline ${status}\",\"color\":\"${color}\"}" \
            $SLACK_WEBHOOK