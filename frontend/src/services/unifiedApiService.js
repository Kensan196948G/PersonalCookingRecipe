/**\n * 統一APIサービス\n * Personal Cooking Recipe - フロントエンド認証統合\n */\n\nimport axios from 'axios';\n\n// API設定\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\n\n// Axios インスタンス作成\nconst apiClient = axios.create({\n  baseURL: API_BASE_URL,\n  timeout: 10000,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// リクエストインターセプター（認証トークン自動付与）\napiClient.interceptors.request.use(\n  (config) => {\n    const token = localStorage.getItem('authToken');\n    if (token) {\n      config.headers.Authorization = `Bearer ${token}`;\n    }\n    \n    // リクエスト開始時間記録（パフォーマンス監視）\n    config.startTime = Date.now();\n    \n    return config;\n  },\n  (error) => {\n    return Promise.reject(error);\n  }\n);\n\n// レスポンスインターセプター（エラー統一処理）\napiClient.interceptors.response.use(\n  (response) => {\n    // レスポンス時間計算\n    const responseTime = Date.now() - response.config.startTime;\n    console.debug(`API Response Time: ${responseTime}ms - ${response.config.method?.toUpperCase()} ${response.config.url}`);\n    \n    return response;\n  },\n  async (error) => {\n    const originalRequest = error.config;\n    \n    // 統一エラーハンドリング\n    if (error.response) {\n      const { status, data } = error.response;\n      \n      // 401エラー（認証失敗）の処理\n      if (status === 401 && !originalRequest._retry) {\n        originalRequest._retry = true;\n        \n        // トークンリフレッシュ試行\n        const refreshToken = localStorage.getItem('refreshToken');\n        if (refreshToken) {\n          try {\n            const response = await apiClient.post('/auth/refresh', {\n              refreshToken\n            });\n            \n            const { accessToken, refreshToken: newRefreshToken } = response.data.data;\n            localStorage.setItem('authToken', accessToken);\n            localStorage.setItem('refreshToken', newRefreshToken);\n            \n            // 元のリクエストを再実行\n            originalRequest.headers.Authorization = `Bearer ${accessToken}`;\n            return apiClient(originalRequest);\n          } catch (refreshError) {\n            console.error('Token refresh failed:', refreshError);\n            // リフレッシュ失敗時はログアウト\n            handleLogout();\n            throw new UnifiedApiError('REFRESH_FAILED', 'Failed to refresh authentication token', 401);\n          }\n        } else {\n          handleLogout();\n          throw new UnifiedApiError('NO_REFRESH_TOKEN', 'No refresh token available', 401);\n        }\n      }\n      \n      // 統一エラー形式で例外をスロー\n      const errorCode = data?.error?.code || 'UNKNOWN_ERROR';\n      const errorMessage = data?.error?.message || error.message;\n      throw new UnifiedApiError(errorCode, errorMessage, status, data?.error?.details);\n    }\n    \n    // ネットワークエラー等\n    if (error.request) {\n      throw new UnifiedApiError('NETWORK_ERROR', 'Network connection failed', 0);\n    }\n    \n    // その他のエラー\n    throw new UnifiedApiError('UNKNOWN_ERROR', error.message, 0);\n  }\n);\n\n/**\n * 統一APIエラークラス\n */\nclass UnifiedApiError extends Error {\n  constructor(code, message, statusCode = 0, details = null) {\n    super(message);\n    this.name = 'UnifiedApiError';\n    this.code = code;\n    this.statusCode = statusCode;\n    this.details = details;\n  }\n  \n  /**\n   * ユーザー向けメッセージ取得\n   */\n  getUserMessage() {\n    const userMessages = {\n      AUTH_NO_TOKEN: 'ログインが必要です',\n      AUTH_INVALID_TOKEN: 'セッションが無効です。再ログインしてください',\n      AUTH_EXPIRED_TOKEN: 'セッションが期限切れです。再ログインしてください',\n      USER_INVALID_CREDENTIALS: 'メールアドレスまたはパスワードが間違っています',\n      USER_ALREADY_EXISTS: 'このメールアドレスは既に使用されています',\n      RECIPE_NOT_FOUND: 'レシピが見つかりません',\n      VALIDATION_ERROR: '入力内容に誤りがあります',\n      NETWORK_ERROR: 'ネットワーク接続に問題があります',\n      INTERNAL_SERVER_ERROR: 'サーバーエラーが発生しました',\n      RATE_LIMIT_EXCEEDED: 'リクエストが多すぎます。しばらく待ってから再度お試しください'\n    };\n    \n    return userMessages[this.code] || 'エラーが発生しました';\n  }\n}\n\n/**\n * ログアウト処理\n */\nconst handleLogout = () => {\n  localStorage.removeItem('authToken');\n  localStorage.removeItem('refreshToken');\n  \n  // React Router で login ページにリダイレクト\n  if (window.location.pathname !== '/login') {\n    window.location.href = '/login';\n  }\n};\n\n/**\n * 統一APIサービスクラス\n */\nclass UnifiedApiService {\n  /**\n   * 認証関連API\n   */\n  auth = {\n    /**\n     * ユーザー登録\n     */\n    register: async (userData) => {\n      const response = await apiClient.post('/auth/register', userData);\n      const { accessToken, refreshToken, user } = response.data.data;\n      \n      localStorage.setItem('authToken', accessToken);\n      localStorage.setItem('refreshToken', refreshToken);\n      \n      return { user, accessToken, refreshToken };\n    },\n    \n    /**\n     * ログイン\n     */\n    login: async (credentials) => {\n      const response = await apiClient.post('/auth/login', credentials);\n      const { accessToken, refreshToken, user } = response.data.data;\n      \n      localStorage.setItem('authToken', accessToken);\n      localStorage.setItem('refreshToken', refreshToken);\n      \n      return { user, accessToken, refreshToken };\n    },\n    \n    /**\n     * ログアウト\n     */\n    logout: async () => {\n      try {\n        await apiClient.post('/auth/logout');\n      } catch (error) {\n        console.warn('Logout API call failed:', error);\n      } finally {\n        handleLogout();\n      }\n    },\n    \n    /**\n     * プロフィール取得\n     */\n    getProfile: async () => {\n      const response = await apiClient.get('/auth/profile');\n      return response.data.data.user;\n    },\n    \n    /**\n     * プロフィール更新\n     */\n    updateProfile: async (userData) => {\n      const response = await apiClient.put('/auth/profile', userData);\n      return response.data;\n    },\n    \n    /**\n     * パスワード変更\n     */\n    changePassword: async (passwordData) => {\n      const response = await apiClient.put('/auth/password', passwordData);\n      return response.data;\n    }\n  };\n  \n  /**\n   * レシピ関連API\n   */\n  recipes = {\n    /**\n     * レシピ一覧取得（パブリック - 認証オプショナル）\n     */\n    getAll: async (params = {}) => {\n      const response = await apiClient.get('/recipes', { params });\n      return response.data;\n    },\n    \n    /**\n     * レシピ詳細取得（パブリック - 認証オプショナル）\n     */\n    getById: async (id) => {\n      const response = await apiClient.get(`/recipes/${id}`);\n      return response.data;\n    },\n    \n    /**\n     * レシピ作成（認証必須）\n     */\n    create: async (recipeData) => {\n      const response = await apiClient.post('/recipes', recipeData, {\n        headers: {\n          'Content-Type': 'multipart/form-data'\n        }\n      });\n      return response.data;\n    },\n    \n    /**\n     * レシピ更新（認証必須）\n     */\n    update: async (id, recipeData) => {\n      const response = await apiClient.put(`/recipes/${id}`, recipeData, {\n        headers: {\n          'Content-Type': 'multipart/form-data'\n        }\n      });\n      return response.data;\n    },\n    \n    /**\n     * レシピ削除（認証必須）\n     */\n    delete: async (id) => {\n      const response = await apiClient.delete(`/recipes/${id}`);\n      return response.data;\n    },\n    \n    /**\n     * お気に入り切り替え（認証必須）\n     */\n    toggleFavorite: async (id) => {\n      const response = await apiClient.put(`/recipes/${id}/favorite`);\n      return response.data;\n    },\n    \n    /**\n     * 評価更新（認証必須）\n     */\n    updateRating: async (id, rating) => {\n      const response = await apiClient.put(`/recipes/${id}/rating`, { rating });\n      return response.data;\n    }\n  };\n  \n  /**\n   * カテゴリ関連API\n   */\n  categories = {\n    /**\n     * カテゴリ一覧取得（パブリック）\n     */\n    getAll: async () => {\n      const response = await apiClient.get('/categories');\n      return response.data;\n    },\n    \n    /**\n     * カテゴリ詳細取得（パブリック）\n     */\n    getById: async (id) => {\n      const response = await apiClient.get(`/categories/${id}`);\n      return response.data;\n    },\n    \n    /**\n     * カテゴリ作成（認証必須）\n     */\n    create: async (categoryData) => {\n      const response = await apiClient.post('/categories', categoryData);\n      return response.data;\n    },\n    \n    /**\n     * カテゴリ更新（認証必須）\n     */\n    update: async (id, categoryData) => {\n      const response = await apiClient.put(`/categories/${id}`, categoryData);\n      return response.data;\n    },\n    \n    /**\n     * カテゴリ削除（認証必須）\n     */\n    delete: async (id) => {\n      const response = await apiClient.delete(`/categories/${id}`);\n      return response.data;\n    }\n  };\n}\n\n// シングルトンインスタンス\nconst unifiedApiService = new UnifiedApiService();\n\n// 名前付きエクスポート\nexport { \n  unifiedApiService,\n  UnifiedApiError,\n  apiClient as rawApiClient\n};\n\n// デフォルトエクスポート\nexport default unifiedApiService;"