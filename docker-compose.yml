# Docker Compose - PersonalCookingRecipe 本番環境
version: '3.8'

services:
  # Nginx リバースプロキシ
  nginx:
    image: nginx:alpine
    container_name: recipe-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/sites-enabled:/etc/nginx/sites-enabled:ro
      - ./ssl:/etc/nginx/ssl:ro
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - frontend
      - backend
      - api
    networks:
      - recipe-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # フロントエンド（Next.js）
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: runner
    container_name: recipe-frontend
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=http://backend:5000
      - NEXT_PUBLIC_FASTAPI_URL=http://api:8000
    volumes:
      - ./logs/frontend:/app/logs
    networks:
      - recipe-network
    restart: unless-stopped
    depends_on:
      - backend
      - api

  # バックエンド（Node.js Express）
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: runner
    container_name: recipe-backend
    environment:
      - NODE_ENV=production
      - PORT=5000
      - JWT_SECRET=${JWT_SECRET}
      - DB_PATH=/app/data/recipes.db
      - UPLOAD_PATH=/app/uploads
      - LOG_LEVEL=info
    volumes:
      - recipe-data:/app/data
      - recipe-uploads:/app/uploads
      - ./logs/backend:/app/logs
    networks:
      - recipe-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:5000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # API（FastAPI Python）
  api:
    build:
      context: ./api
      dockerfile: Dockerfile.production
      target: runner
    container_name: recipe-api
    environment:
      - PYTHONPATH=/app
      - LOG_LEVEL=info
      - BACKEND_URL=http://backend:5000
      - FRONTEND_URL=http://frontend:3000
    volumes:
      - ./logs/api:/app/logs
      - recipe-data:/app/data:ro
    networks:
      - recipe-network
    restart: unless-stopped
    depends_on:
      - backend

  # ログ管理（Fluentd）
  fluentd:
    image: fluent/fluentd:v1.16-1
    container_name: recipe-fluentd
    volumes:
      - ./fluentd/fluent.conf:/fluentd/etc/fluent.conf:ro
      - ./logs:/var/log/input
      - fluentd-logs:/var/log/fluentd
    networks:
      - recipe-network
    restart: unless-stopped

  # システム監視（Prometheus - Optional）
  prometheus:
    image: prom/prometheus:latest
    container_name: recipe-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
    networks:
      - recipe-network
    restart: unless-stopped
    profiles:
      - monitoring

  # グラフィック監視（Grafana - Optional）
  grafana:
    image: grafana/grafana:latest
    container_name: recipe-grafana
    ports:
      - "3001:3000"
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana:/etc/grafana/provisioning
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
    networks:
      - recipe-network
    restart: unless-stopped
    profiles:
      - monitoring
    depends_on:
      - prometheus

volumes:
  recipe-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${PWD}/data
  recipe-uploads:
    driver: local
    driver_opts:
      type: none  
      o: bind
      device: ${PWD}/uploads
  fluentd-logs:
  prometheus-data:
  grafana-data:

networks:
  recipe-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16